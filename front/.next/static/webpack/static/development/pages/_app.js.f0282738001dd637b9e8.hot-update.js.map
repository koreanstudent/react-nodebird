{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.f0282738001dd637b9e8.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n// call -> 함수 동기적 호출\r\n// fork -> 함수 비동기적 호출\r\n// put ->  Action dispatch 동일\r\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n\r\nfunction loginAPI() {\r\n // 서버에 요청을 보내는 부분\r\n}\r\n\r\nconst HELLO_SAGA ='HELLO_SAGA';\r\n\r\nfunction* login() {\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* helloSaga() {\r\n    console.log('before saga');\r\n    yield take(HELLO_SAGA);\r\n    console.log('hello saga');\r\n}\r\n\r\n// takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\r\nfunction* wathchLogin() {\r\n    yield takeLatest(LOG_IN,login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield helloSaga();\r\n\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAcA;;;AAcA;;;AAOA;;;AAIA;AACA;AAxCA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAQA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}