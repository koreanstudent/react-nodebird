{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.f9690eb7d20e4a9ad7c9.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport AppLayout from '../components/AppLayout';\r\nimport reducer from '../reducers';\r\nimport withRedux from'next-redux-wrapper';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\n\r\n\r\n// 레이아웃\r\n// store는 state, action, reducer가 합쳐진 것\r\n// withRedux()(NodeBird); -> 기존 컴퍼넌트를 확장시키는 것\r\n// withRedux -> props로 store 컴포넌트를 가져온다 next.js\r\n\r\nconst NodeBird = ({ Component, store, pageProps }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n            <title>NodeBird</title>\r\n            <link rel =\"stylesheet\" href= \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"/>\r\n            </Head>\r\n            <AppLayout>\r\n                <Component/>\r\n            </AppLayout>\r\n        </Provider>\r\n    )\r\n};\r\n\r\n// node -> renderd : numbers, string, elements or an array .. \r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n};\r\n// context next에서 넣어줌 콘솔로 확인해보면 가능 \r\nNodeBird.getInitialProps = async (context) => {\r\n    console.log(context);\r\n    const { ctx, Component } = context;\r\n    let pageProps = {};\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n    return { pageProps };\r\n  };\r\n\r\n// 미들웨어는 액션과 스토어 사이에서 동작합니다.\r\n// compose -> 미들웨어 여러개 합성하는것\r\n// applyMiddleware -> 미들웨어 적용해주는것\r\nexport default withRedux((initialState, options)=> {\r\n    // 여기에다가 store 커스터마이징\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares)) \r\n    : compose(applyMiddleware(...middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined'?\r\n     window.__REDUX_DEVTOOLS_EXTENSION__(): (f) => f,\r\n     );\r\n    const store =createStore(reducer, initialState, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n  })(NodeBird);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAOA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}