{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.dab6f8665bd64311bcdc.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n// all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\r\n// call -> 함수 동기적 호출\r\n// ex) 서버에 요청을하면 응답이 될때까지 기다렸다가 다음으로 넘어감, 서버요청할때 많이 사용?\r\n// fork -> 함수 비동기적 호출\r\n// ex) 서버에 요청하면 응답이오던 말든 다음으로 넘어감.\r\n// put ->  Action dispatch 동일\r\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n// takeLatest -> 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소 액션을 여러번 요청하는 경우 마지막 액션을 실행\r\n//  ex) 로그인 버튼 여러번 했을 경우 로그인 요청이 여러개 나타나는 것을 막을 수 있다.\r\n// takeEvery -> while(true)\r\n//  ex) 여러번 클릭이 유효한 거면 사용, 숫자 카운트 등등\r\n// delay -> delay(1000)\r\n\r\n// function* watchHello() {\r\n//     yield takeEvery(HELLO_SAGA, function*(){\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     })\r\n// }\r\n\r\n// function* watchHello() {\r\n//     while(true){\r\n//     yield take(HELLO_SAGA);\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n\r\n//     // while(true)  제너레이터에서만 사용가능한 문법\r\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\r\n//     while(true){\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//     }\r\n//     // 비동기 요청, 타이머 넣어도 되고\r\n// }\r\n\r\n// while문이 없으면 함수가 끝나버린다.\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST,login);\r\n}\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/login');\r\n}\r\n   \r\n   \r\nfunction* login() {\r\n    try{\r\n        // yield call(loginAPI);\r\n        yield delay(2000);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp);\r\n}\r\n\r\nfunction signUpAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n}\r\n   \r\n   \r\nfunction* signUp() {\r\n    try{\r\n        yield call(signUpAPI, action.data);\r\n        yield put ({ \r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: SIGN_UP_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp),\r\n    ]);\r\n\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA+CA;;;AAUA;;;AAeA;;;AASA;;;AAcA;AACA;AAhGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAIA;AACA;AADA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AASA;AACA;AADA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAQA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}