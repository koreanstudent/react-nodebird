{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true // 로그인 한사람만 글쓰게할수잇게 쿠키를 보낸다\n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts', {});\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchloadMainPosts), fork(watchAddComment), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchloadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","addCommentAPI","addComment","postId","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS } from '../reducers/post';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post', postData, {\r\n      withCredentials: true, // 로그인 한사람만 글쓰게할수잇게 쿠키를 보낸다\r\n    });\r\n  }\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts', {});\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data\r\n            \r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchloadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n\r\n    return axios.get(`/hashtag/${tag}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data\r\n            \r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`);\r\n  }\r\n  \r\n  function* loadUserPosts(action) {\r\n    try {\r\n      const result = yield call(loadUserPostsAPI, action.data);\r\n      yield put({\r\n        type: LOAD_USER_POSTS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: LOAD_USER_POSTS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n  }\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            }\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all ([\r\n        fork(watchAddPost),\r\n        fork(watchloadMainPosts),\r\n        fork(watchAddComment),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}