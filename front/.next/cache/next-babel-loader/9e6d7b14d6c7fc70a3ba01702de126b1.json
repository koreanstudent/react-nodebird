{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chang\\\\Desktop\\\\web\\\\react-nodebird\\\\react-nodebird\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport { Card, Icon, Button, Avatar, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setcommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"\\uB313\\uAE00\")), __jsx(List, {\n    header: '${post.Comments ? post.Comments.length : 0} 댓글',\n    itemLayout: \"horizontal\",\n    dataSource: post.Comment || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, item.User.nickname[0]),\n      content: item.content,\n      datetime: item.createdAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Icon","Button","Avatar","Input","PropTypes","useSelector","useDispatch","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setcommentText","me","state","user","dispatch","onToggleComment","prev","createdAt","img","User","nickname","content","onSubmitComment","onChangeCommentText","Comment","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { Card, Icon, Button, Avatar, Input} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText,setcommentText] = useState('');\r\n    const { me } = useSelector( state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img}/>}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                <Icon type=\"heart\" key=\"heart\"/>,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\"/>,\r\n            ]}\r\n            extra ={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta\r\n                avatar= {<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title= {post.User.nickname}\r\n                description={post.content}\r\n            />\r\n        </Card>\r\n        {commentFormOpened && (\r\n            <>\r\n            <Form onSubmit={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows= {4} value={commentText} onChange={ onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">댓글</Button>\r\n            </Form>\r\n            <List header={'${post.Comments ? post.Comments.length : 0} 댓글'}\r\n                  itemLayout=\"horizontal\"\r\n                  dataSource={post.Comment || []}\r\n                  renderItem = {item => (\r\n                      <li>\r\n                          <Comment\r\n                                author={item.User.nickname}\r\n                                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                content = {item.content}\r\n                                datetime= {item.createdAt}\r\n                          />\r\n                      </li>\r\n                  )}\r\n            />\r\n            </>\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    })\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}