{"ast":null,"code":"import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; // all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\n// call -> 함수 동기적 호출\n// fork -> 함수 비동기적 호출\n// put ->  Action dispatch 동일\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchHello() {\n  console.log('before saga'); // while(true)  제너레이터에서만 사용가능한 문법\n  // 클릭이벤트를 횟수 제한도 가능, 반복 (for문)\n\n  while (true) {\n    yield take(HELLO_SAGA);\n    console.log('hello saga');\n  } // 비동기 요청, 타이머 넣어도 되고\n\n} // takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\n\n\nfunction* wathchLogin() {\n  yield takeLatest(LOG_IN, login);\n}\n\nexport default function* userSaga() {\n  yield all([watchHello(), watchLogin(), watchSignUp()]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","HELLO_SAGA","login","type","e","console","error","watchHello","log","wathchLogin","userSaga","watchLogin","watchSignUp"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,GAAoB,CACnB;AACA;;AAED,MAAMC,UAAU,GAAE,YAAlB;;AAEA,UAAUC,KAAV,GAAkB;AACd,MAAG;AACC,UAAMR,IAAI,CAACM,QAAD,CAAV;AACA,UAAML,GAAG,CAAE;AACPQ,MAAAA,IAAI,EAAEL;AADC,KAAF,CAAT;AAGH,GALD,CAKE,OAAOM,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMT,GAAG,CAAE;AACPQ,MAAAA,IAAI,EAAEJ;AADC,KAAF,CAAT;AAGH;AACJ;;AAED,UAAUQ,UAAV,GAAuB;AACnBF,EAAAA,OAAO,CAACG,GAAR,CAAY,aAAZ,EADmB,CAGnB;AACA;;AACA,SAAM,IAAN,EAAW;AACP,UAAMZ,IAAI,CAACK,UAAD,CAAV;AACAI,IAAAA,OAAO,CAACG,GAAR,CAAY,YAAZ;AACH,GARkB,CASnB;;AACH,C,CAED;;;AACA,UAAUC,WAAV,GAAwB;AACpB,QAAMhB,UAAU,CAACI,MAAD,EAAQK,KAAR,CAAhB;AACH;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAChC,QAAMnB,GAAG,CAAC,CACNgB,UAAU,EADJ,EAENI,UAAU,EAFJ,EAGNC,WAAW,EAHL,CAAD,CAAT;AAMH","sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n// all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\r\n// call -> 함수 동기적 호출\r\n// fork -> 함수 비동기적 호출\r\n// put ->  Action dispatch 동일\r\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n\r\nfunction loginAPI() {\r\n // 서버에 요청을 보내는 부분\r\n}\r\n\r\nconst HELLO_SAGA ='HELLO_SAGA';\r\n\r\nfunction* login() {\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchHello() {\r\n    console.log('before saga');\r\n\r\n    // while(true)  제너레이터에서만 사용가능한 문법\r\n    // 클릭이벤트를 횟수 제한도 가능, 반복 (for문)\r\n    while(true){\r\n        yield take(HELLO_SAGA);\r\n        console.log('hello saga');\r\n    }\r\n    // 비동기 요청, 타이머 넣어도 되고\r\n}\r\n\r\n// takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\r\nfunction* wathchLogin() {\r\n    yield takeLatest(LOG_IN,login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchHello(),\r\n        watchLogin(),\r\n        watchSignUp(),\r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}