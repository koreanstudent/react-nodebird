{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  console.log(postData);\n  console.log(\"1111\");\n  return axios.post('/post', postData, {\n    withCredentials: true // 로그인 한사람만 글쓰게할수잇게 쿠키를 보낸다\n\n  });\n}\n\nfunction* addPost(action) {\n  console.log(action);\n\n  try {\n    console.log(\"in2\");\n    console.log(\"in3\");\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"in3\");\n    console.log(result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts', {});\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchloadMainPosts), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","axios","addPostAPI","postData","console","log","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchloadMainPosts","addCommentAPI","addComment","postId","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction addPostAPI(postData) {\r\n    console.log(postData);\r\n    console.log(\"1111\");\r\n    return axios.post('/post', postData, {\r\n      withCredentials: true, // 로그인 한사람만 글쓰게할수잇게 쿠키를 보낸다\r\n    });\r\n  }\r\n\r\nfunction* addPost(action) {\r\n    console.log(action);\r\n    try {\r\n        console.log(\"in2\");\r\n        console.log(\"in3\");\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"in3\");\r\n        console.log(result);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts', {});\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data\r\n            \r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchloadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts);\r\n}\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            }\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all ([\r\n        fork(watchAddPost),\r\n        fork(watchloadMainPosts),\r\n        fork(watchAddComment)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}