{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chang\\\\Desktop\\\\web\\\\react-nodebird\\\\react-nodebird\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Input, Form, List, Comment } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        //해시태그일때\n        return __jsx(Link, {\n          href: \"/hashtag\",\n          key: v,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, v));\n      }\n\n      return v;\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"\\uB313\\uAE00\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, item.User.nickname[0]),\n      content: item.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Input","Form","List","Comment","Link","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","split","map","v","match","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect  } from 'react';\r\nimport { Card, Icon, Button, Avatar, Input, Form,List,Comment} from 'antd';\r\nimport Link  from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText,setCommentText] = useState('');\r\n    const { me } = useSelector( state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n          return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n          type: ADD_COMMENT_REQUEST,\r\n          data: {\r\n            postId: post.id,\r\n          },\r\n        });\r\n      }, [me && me.id]);\r\n    \r\n      useEffect(() => {\r\n        setCommentText('');\r\n      }, [commentAdded === true]);\r\n    \r\n      const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n      }, []);\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img}/>}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                <Icon type=\"heart\" key=\"heart\"/>,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\"/>,\r\n            ]}\r\n            extra ={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta\r\n                avatar= {<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title= {post.User.nickname}\r\n                description={<div>{post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                    if (v.match(/#[^\\s]+/)) {  //해시태그일때\r\n                        return (\r\n                            <Link href =\"/hashtag\" key={v}><a>{v}</a></Link>\r\n                        );\r\n                    }\r\n                    return v;\r\n                })}</div>}\r\n            />\r\n        </Card>\r\n        {commentFormOpened && (\r\n            <>\r\n            <Form onSubmit={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows={4} value={commentText} onChange={ onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>댓글</Button>\r\n            </Form>\r\n            <List header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                  itemLayout=\"horizontal\"\r\n                  dataSource={post.Comments || []}\r\n                  renderItem = {item => (\r\n                      <li>\r\n                          <Comment\r\n                                author={item.User.nickname}\r\n                                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                content = {item.content}\r\n                                \r\n                          />\r\n                      </li>\r\n                  )}\r\n            />\r\n            </>\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    })\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}