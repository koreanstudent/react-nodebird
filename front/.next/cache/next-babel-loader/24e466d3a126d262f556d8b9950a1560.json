{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst dummyUser = {\n  nickname: '이창현',\n  Post: [],\n  Followers: [],\n  Followings: [],\n  signData: []\n}; // store\n\nexport const intialState = {\n  isLoggedIn: false,\n  user: null\n};\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 액션의 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const loginAction = {\n  type: LOG_IN_REQUEST,\n  data: {\n    nickname: '이창현'\n  }\n};\nexport const logoutAction = {\n  type: LOG_OUT_REQUEST\n}; // Action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다.\n\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP_REQUEST,\n    data\n  };\n};\n\nconst reducer = (state = intialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        //로그인 성공시\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          signData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followers","Followings","signData","intialState","isLoggedIn","user","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAction","type","data","logoutAction","signUpAction","reducer","state","action"],"mappings":";;;;;;;;;;;;AACA,MAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,KADI;AAEdC,EAAAA,IAAI,EAAE,EAFQ;AAGdC,EAAAA,SAAS,EAAE,EAHG;AAIdC,EAAAA,UAAU,EAAE,EAJE;AAKdC,EAAAA,QAAQ,EAAE;AALI,CAAlB,C,CAQA;;AACA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,UAAU,EAAE,KADW;AAEvBC,EAAAA,IAAI,EAAE;AAFiB,CAApB;AAKP,OAAO,MAAMC,cAAc,GAAE,gBAAtB,C,CAAwC;;AAC/C,OAAO,MAAMC,cAAc,GAAC,gBAArB;AACP,OAAO,MAAMC,cAAc,GAAC,gBAArB;AAEP,OAAO,MAAMC,eAAe,GAAC,iBAAtB;AACP,OAAO,MAAMC,eAAe,GAAC,iBAAtB;AACP,OAAO,MAAMC,eAAe,GAAC,iBAAtB;AAEP,OAAO,MAAMC,eAAe,GAAC,iBAAtB;AACP,OAAO,MAAMC,eAAe,GAAC,iBAAtB;AACP,OAAO,MAAMC,eAAe,GAAC,iBAAtB;AAEP,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAEV,cADiB;AAEvBW,EAAAA,IAAI,EAAE;AACFnB,IAAAA,QAAQ,EAAE;AADR;AAFiB,CAApB;AAQP,OAAO,MAAMoB,YAAY,GAAG;AACxBF,EAAAA,IAAI,EAAEP;AADkB,CAArB,C,CAGP;;AACA,OAAO,MAAMU,YAAY,GAAIF,IAAD,IAAU;AAClC,SAAO;AACPD,IAAAA,IAAI,EAAEJ,eADC;AAEPK,IAAAA;AAFO,GAAP;AAIH,CALM;;AAOP,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAElB,WAAR,EAAqBmB,MAArB,KAAgC;AAC5C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKV,cAAL;AAAqB;AAAG;AACpB,iCACOe,KADP;AAEIjB,UAAAA,UAAU,EAAC,IAFf;AAGIC,UAAAA,IAAI,EAACR;AAHT;AAKH;;AACD,SAAKY,eAAL;AAAsB;AAClB,iCACOY,KADP;AAEIjB,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,IAAI,EAAE;AAHV;AAKH;;AACD,SAAKO,eAAL;AAAuB;AACnB,iCACOS,KADP;AAEInB,UAAAA,QAAQ,EAAEoB,MAAM,CAACL;AAFrB;AAIH;;AACD;AAAS;AACL,iCACOI,KADP;AAGH;AAzBL;AA4BH,CA7BD;;AA+BA,eAAeD,OAAf","sourcesContent":["\r\nconst dummyUser = {\r\n    nickname: '이창현',\r\n    Post: [],\r\n    Followers: [],\r\n    Followings: [],\r\n    signData: [],\r\n};\r\n\r\n// store\r\nexport const intialState = {\r\n    isLoggedIn: false,\r\n    user: null,\r\n};\r\n\r\nexport const LOG_IN_REQUEST ='LOG_IN_REQUEST'; // 액션의 이름\r\nexport const LOG_IN_SUCCESS='LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE='LOG_IN_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST='LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS='LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE='LOG_OUT_FAILURE';\r\n\r\nexport const SIGN_UP_REQUEST='SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS='SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE='SIGN_UP_FAILURE';\r\n\r\nexport const loginAction = {\r\n    type: LOG_IN_REQUEST,\r\n    data: {\r\n        nickname: '이창현'\r\n    },\r\n    \r\n};\r\n\r\nexport const logoutAction = {\r\n    type: LOG_OUT_REQUEST,\r\n}\r\n// Action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다.\r\nexport const signUpAction = (data) => {\r\n    return {\r\n    type: SIGN_UP_REQUEST,\r\n    data, \r\n    }\r\n}\r\n\r\nconst reducer = (state= intialState, action) => {\r\n    switch (action.type){\r\n        case LOG_IN_REQUEST: {  //로그인 성공시\r\n            return {\r\n                ...state,\r\n                isLoggedIn:true,\r\n                user:dummyUser,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                user: null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST : {\r\n            return {\r\n                ...state,\r\n                signData: action.data\r\n            }\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}