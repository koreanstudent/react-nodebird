{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios'; // all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\n// call -> 함수 동기적 호출\n// ex) 서버에 요청을하면 응답이 될때까지 기다렸다가 다음으로 넘어감, 서버요청할때 많이 사용?\n// fork -> 함수 비동기적 호출\n// ex) 서버에 요청하면 응답이오던 말든 다음으로 넘어감.\n// put ->  Action dispatch 동일\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\n// takeLatest -> 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소 액션을 여러번 요청하는 경우 마지막 액션을 실행\n//  ex) 로그인 버튼 여러번 했을 경우 로그인 요청이 여러개 나타나는 것을 막을 수 있다.\n// takeEvery -> while(true)\n//  ex) 여러번 클릭이 유효한 거면 사용, 숫자 카운트 등등\n// delay -> delay(1000)\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*(){\n//         console.log(1);\n//         console.log(2);\n//     })\n// }\n// function* watchHello() {\n//     while(true){\n//     yield take(HELLO_SAGA);\n//         console.log(1);\n//         console.log(2);\n//     }\n// }\n// function* watchHello() {\n//     console.log('before saga');\n//     // while(true)  제너레이터에서만 사용가능한 문법\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\n//     while(true){\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//     }\n//     // 비동기 요청, 타이머 넣어도 되고\n// }\n// while문이 없으면 함수가 끝나버린다.\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction logInAPI(logInData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', logInData, {\n    withCredentials: true // 쿠키를 주고 받을 수 있다.\n\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // signUpAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","watchLogIn","logIn","logInAPI","logInData","post","withCredentials","action","result","data","type","e","console","error","watchSignUp","signUp","signUpAPI","signUpData","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogOut","LOG_OUT_REQUEST","loadUserAPI","userId","get","loadUser","LOAD_USER_SUCCESS","me","LOAD_USER_FAILURE","watchLoadUser","LOAD_USER_REQUEST","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n// all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\r\n// call -> 함수 동기적 호출\r\n// ex) 서버에 요청을하면 응답이 될때까지 기다렸다가 다음으로 넘어감, 서버요청할때 많이 사용?\r\n// fork -> 함수 비동기적 호출\r\n// ex) 서버에 요청하면 응답이오던 말든 다음으로 넘어감.\r\n// put ->  Action dispatch 동일\r\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n// takeLatest -> 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소 액션을 여러번 요청하는 경우 마지막 액션을 실행\r\n//  ex) 로그인 버튼 여러번 했을 경우 로그인 요청이 여러개 나타나는 것을 막을 수 있다.\r\n// takeEvery -> while(true)\r\n//  ex) 여러번 클릭이 유효한 거면 사용, 숫자 카운트 등등\r\n// delay -> delay(1000)\r\n\r\n// function* watchHello() {\r\n//     yield takeEvery(HELLO_SAGA, function*(){\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     })\r\n// }\r\n\r\n// function* watchHello() {\r\n//     while(true){\r\n//     yield take(HELLO_SAGA);\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n\r\n//     // while(true)  제너레이터에서만 사용가능한 문법\r\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\r\n//     while(true){\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//     }\r\n//     // 비동기 요청, 타이머 넣어도 되고\r\n// }\r\n\r\n\r\n\r\n// while문이 없으면 함수가 끝나버린다.\r\nfunction* watchLogIn() {\r\n    yield takeEvery(LOG_IN_REQUEST,logIn);\r\n}\r\n\r\nfunction logInAPI(logInData) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/login', logInData, {\r\n        withCredentials: true, // 쿠키를 주고 받을 수 있다.\r\n    });\r\n}\r\n   \r\n   \r\nfunction* logIn(action) {\r\n    try{\r\n        const result = yield call(logInAPI, action.data);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp);\r\n}\r\n\r\nfunction signUpAPI(signUpData) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/', signUpData);\r\n}\r\n   \r\n   \r\nfunction* signUp(action) {\r\n    try{\r\n        yield call(signUpAPI, action.data);\r\n        yield put ({ \r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch (e) { // signUpAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: SIGN_UP_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* logOut() {\r\n    try {\r\n      // yield call(logOutAPI);\r\n      yield call(logOutAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_OUT_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLogOut() {\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n  }\r\n  \r\n  function loadUserAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* loadUser(action) {\r\n    try {\r\n      // yield call(loadUserAPI);\r\n      const result = yield call(loadUserAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_USER_SUCCESS,\r\n        data: result.data,\r\n        me: !action.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadUser() {\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n  }\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}