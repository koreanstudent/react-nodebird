{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport withRedux from 'next-redux-wrapper';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas'; // 레이아웃\n// store는 state, action, reducer가 합쳐진 것\n// withRedux()(NodeBird); -> 기존 컴퍼넌트를 확장시키는 것\n// withRedux -> props로 store 컴포넌트를 가져온다 next.js\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n}; // node -> renderd : numbers, string, elements or an array .. \n\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; // context next에서 넣어줌 콘솔로 확인해보면 가능 \n\nNodeBird.getInitialProps = async context => {\n  console.log(context);\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n}; // 미들웨어는 액션과 스토어 사이에서 동작합니다.\n// compose -> 미들웨어 여러개 합성하는것\n// applyMiddleware -> 미들웨어 적용해주는것\n\n\nexport default withRedux((initialState, options) => {\n  // 여기에다가 store 커스터마이징\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n})(NodeBird);","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/pages/_app.js"],"names":["React","Head","PropTypes","AppLayout","reducer","withRedux","Provider","createStore","compose","applyMiddleware","createSagaMiddleware","rootSaga","NodeBird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,SAAP,MAAqB,oBAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAIA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAAD,KAAqC;AAClD,SACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED;AAAjB,KACI,MAAC,IAAD,QACA,gCADA,EAEA;AAAM,IAAA,GAAG,EAAE,YAAX;AAAwB,IAAA,IAAI,EAAE;AAA9B,IAFA,CADJ,EAKI,MAAC,SAAD,QACI,MAAC,SAAD,EAAeC,SAAf,CADJ,CALJ,CADJ;AAWH,CAZD,C,CAcA;;;AACAH,QAAQ,CAACI,SAAT,GAAqB;AACjBH,EAAAA,SAAS,EAAEX,SAAS,CAACe,WAAV,CAAsBC,UADhB;AAEjBJ,EAAAA,KAAK,EAAEZ,SAAS,CAACiB,MAAV,CAAiBD,UAFP;AAGjBH,EAAAA,SAAS,EAAEb,SAAS,CAACiB,MAAV,CAAiBD;AAHX,CAArB,C,CAKA;;AACAN,QAAQ,CAACQ,eAAT,GAA2B,MAAOC,OAAP,IAAmB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAM;AAAEG,IAAAA,GAAF;AAAOX,IAAAA;AAAP,MAAqBQ,OAA3B;AACA,MAAIN,SAAS,GAAG,EAAhB;;AACA,MAAIF,SAAS,CAACO,eAAd,EAA+B;AAC7BL,IAAAA,SAAS,GAAG,MAAMF,SAAS,CAACO,eAAV,CAA0BI,GAA1B,CAAlB;AACD;;AACD,SAAO;AAAET,IAAAA;AAAF,GAAP;AACD,CARH,C,CAUA;AACA;AACA;;;AACA,eAAeV,SAAS,CAAC,CAACoB,YAAD,EAAeC,OAAf,KAA0B;AAC/C;AACA,QAAMC,cAAc,GAAGjB,oBAAoB,EAA3C;AACA,QAAMkB,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACfrB,OAAO,CAACC,eAAe,CAAC,GAAGmB,WAAJ,CAAhB,CADQ,GAEfpB,OAAO,CAACC,eAAe,CAAC,GAAGmB,WAAJ,CAAhB,EAAkC,CAACF,OAAO,CAACI,QAAT,IAAqBC,MAAM,CAACC,4BAAP,KAAwC,WAA7D,GAC1CD,MAAM,CAACC,4BAAP,EAD0C,GACFC,CAAD,IAAOA,CADtC,CAFT;AAKA,QAAMnB,KAAK,GAAEP,WAAW,CAACH,OAAD,EAAUqB,YAAV,EAAwBI,QAAxB,CAAxB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBvB,QAAnB;AACA,SAAOG,KAAP;AACD,CAZqB,CAAT,CAYVF,QAZU,CAAf","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport AppLayout from '../components/AppLayout';\r\nimport reducer from '../reducers';\r\nimport withRedux from'next-redux-wrapper';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\n\r\n\r\n// 레이아웃\r\n// store는 state, action, reducer가 합쳐진 것\r\n// withRedux()(NodeBird); -> 기존 컴퍼넌트를 확장시키는 것\r\n// withRedux -> props로 store 컴포넌트를 가져온다 next.js\r\n\r\nconst NodeBird = ({ Component, store, pageProps }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n            <title>NodeBird</title>\r\n            <link rel =\"stylesheet\" href= \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"/>\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps}/>\r\n            </AppLayout>\r\n        </Provider>\r\n    )\r\n};\r\n\r\n// node -> renderd : numbers, string, elements or an array .. \r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n    pageProps: PropTypes.object.isRequired,\r\n};\r\n// context next에서 넣어줌 콘솔로 확인해보면 가능 \r\nNodeBird.getInitialProps = async (context) => {\r\n    console.log(context);\r\n    const { ctx, Component } = context;\r\n    let pageProps = {};\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n    return { pageProps };\r\n  };\r\n\r\n// 미들웨어는 액션과 스토어 사이에서 동작합니다.\r\n// compose -> 미들웨어 여러개 합성하는것\r\n// applyMiddleware -> 미들웨어 적용해주는것\r\nexport default withRedux((initialState, options)=> {\r\n    // 여기에다가 store 커스터마이징\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares)) \r\n    : compose(applyMiddleware(...middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined'?\r\n     window.__REDUX_DEVTOOLS_EXTENSION__(): (f) => f,\r\n     );\r\n    const store =createStore(reducer, initialState, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n  })(NodeBird);"]},"metadata":{},"sourceType":"module"}