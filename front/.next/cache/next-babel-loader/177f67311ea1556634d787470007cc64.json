{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\n\nvar Hashtag = function Hashtag(_ref) {\n  var tag = _ref.tag;\n  console.log(tag);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_HASHTAG_POSTS_REQUEST,\n      data: tag\n    });\n  }, []);\n  return __jsx(\"div\", null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: +c.createdAt,\n      post: c\n    });\n  }));\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.number.isRequired\n}; // next에서 제공, 서버로 부터 동적인 데이터를 가져올 수 있다. 가장 최초의 작업\n\nHashtag.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('hashtag getInitialProps', context.query.tag);\n          return _context.abrupt(\"return\", {\n            tag: context.query.tag\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/pages/hashtag.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","Hashtag","tag","console","log","dispatch","state","post","mainPosts","type","data","map","c","createdAt","propTypes","number","isRequired","getInitialProps","context","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAW;AAAA,MAATC,GAAS,QAATA,GAAS;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,MAAMG,QAAQ,GAAEP,WAAW,EAA3B;;AAFuB,qBAGDC,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHV;AAAA,MAGfC,SAHe,gBAGfA,SAHe;;AAKvBZ,EAAAA,SAAS,CAAE,YAAM;AACbS,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAET,0BADD;AAELU,MAAAA,IAAI,EAAER;AAFD,KAAD,CAAR;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,SACI,mBACGM,SAAS,CAACG,GAAV,CAAc,UAAAC,CAAC;AAAA,WACd,MAAC,QAAD;AAAU,MAAA,GAAG,EAAE,CAACA,CAAC,CAACC,SAAlB;AAA6B,MAAA,IAAI,EAAED;AAAnC,MADc;AAAA,GAAf,CADH,CADJ;AAOH,CAnBD;;AAqBAX,OAAO,CAACa,SAAR,GAAoB;AAChBZ,EAAAA,GAAG,EAAGL,SAAS,CAACkB,MAAV,CAAiBC;AADP,CAApB,C,CAIA;;AACAf,OAAO,CAACgB,eAAR,GAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACtBf,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCc,OAAO,CAACC,KAAR,CAAcjB,GAArD;AADsB,2CAEf;AAAEA,YAAAA,GAAG,EAAEgB,OAAO,CAACC,KAAR,CAAcjB;AAArB,WAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAKA,eAAeD,OAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Hashtag = ({tag}) => {\r\n    console.log(tag);\r\n    const dispatch =useDispatch();\r\n    const { mainPosts } = useSelector(state => state.post);\r\n    \r\n    useEffect( () => {\r\n        dispatch({\r\n            type: LOAD_HASHTAG_POSTS_REQUEST,\r\n            data: tag,\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n          {mainPosts.map(c => (\r\n            <PostCard key={+c.createdAt} post={c} />\r\n          ))}\r\n        </div>\r\n      );\r\n};\r\n\r\nHashtag.propTypes = {\r\n    tag : PropTypes.number.isRequired,\r\n}\r\n\r\n// next에서 제공, 서버로 부터 동적인 데이터를 가져올 수 있다. 가장 최초의 작업\r\nHashtag.getInitialProps = async (context) => {\r\n    console.log('hashtag getInitialProps', context.query.tag);\r\n    return { tag: context.query.tag };\r\n  };\r\n\r\nexport default Hashtag;\r\n"]},"metadata":{},"sourceType":"module"}