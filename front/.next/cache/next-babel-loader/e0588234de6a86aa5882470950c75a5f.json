{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  mainPosts: [{\n    User: {\n      id: 1,\n      nickname: '이창현'\n    },\n    content: '첫 번째 게시글',\n    comment: []\n  }],\n  //화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: ''\n};\nconst dummyPost = {\n  User: {\n    id: 1,\n    nickname: '이창현'\n  },\n  content: '더미입니다.',\n  comments: []\n};\nconst dummyComment = {\n  User: {\n    id: 1,\n    nickname: 2\n  },\n  createdAt: new Date(),\n  content: '더미 댓글입니다.'\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; // 불변성을 유지하기위해 스트레드 문법 사용\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [dummyPost, ...state.mainPosts],\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Comments = [...post.Comments, dummyComment];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","User","id","nickname","content","comment","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","dummyPost","comments","dummyComment","createdAt","Date","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","reducer","state","action","type","error","commentAdded","postIndex","findIndex","v","data","postId","post","Comments"],"mappings":"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","sourcesContent":["export const initialState ={\r\n    mainPosts: [{\r\n        User: {\r\n            id:1,\r\n            nickname: '이창현',\r\n            \r\n        },\r\n        content: '첫 번째 게시글',\r\n        comment: [],\r\n    }],  //화면에 보일 포스트들\r\n    imagePaths: [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost: false, // 포스트 업로드 중\r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment : false,\r\n    addCommentErrorReason: '',\r\n\r\n};\r\n\r\nconst dummyPost = {\r\n    User: {\r\n        id:1,\r\n        nickname: '이창현',\r\n    },\r\n    content: '더미입니다.',\r\n    comments: [],\r\n}\r\n\r\nconst dummyComment = {\r\n    User: {\r\n        id:1,\r\n        nickname: 2,\r\n    },\r\n    createdAt: new Date(),\r\n    content: '더미 댓글입니다.'\r\n}\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\n\r\n// 불변성을 유지하기위해 스트레드 문법 사용\r\nconst reducer = (state =initialState, action) => {\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost : true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost : false,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                postAdded: true,\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost : false,\r\n                addPostErrorReason: action.error,\r\n            }\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n              ...state,\r\n              isAddingComment: true,\r\n              addCommentErrorReason: '',\r\n              commentAdded: false,\r\n            };\r\n          }\r\n          case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, dummyComment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n              ...state,\r\n              isAddingComment: false,\r\n              mainPosts,\r\n              commentAdded: true,\r\n            };\r\n          }\r\n          case ADD_COMMENT_FAILURE: {\r\n            return {\r\n              ...state,\r\n              isAddingComment: false,\r\n              addCommentErrorReason: action.error,\r\n            };\r\n          }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}