{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios'; // all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\n// call -> 함수 동기적 호출\n// ex) 서버에 요청을하면 응답이 될때까지 기다렸다가 다음으로 넘어감, 서버요청할때 많이 사용?\n// fork -> 함수 비동기적 호출\n// ex) 서버에 요청하면 응답이오던 말든 다음으로 넘어감.\n// put ->  Action dispatch 동일\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\n// takeLatest -> 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소 액션을 여러번 요청하는 경우 마지막 액션을 실행\n//  ex) 로그인 버튼 여러번 했을 경우 로그인 요청이 여러개 나타나는 것을 막을 수 있다.\n// takeEvery -> while(true)\n//  ex) 여러번 클릭이 유효한 거면 사용, 숫자 카운트 등등\n// delay -> delay(1000)\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*(){\n//         console.log(1);\n//         console.log(2);\n//     })\n// }\n// function* watchHello() {\n//     while(true){\n//     yield take(HELLO_SAGA);\n//         console.log(1);\n//         console.log(2);\n//     }\n// }\n// function* watchHello() {\n//     console.log('before saga');\n//     // while(true)  제너레이터에서만 사용가능한 문법\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\n//     while(true){\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//     }\n//     // 비동기 요청, 타이머 넣어도 되고\n// }\n// while문이 없으면 함수가 끝나버린다.\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true // 쿠키를 주고 받을 수 있다.\n\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context4.next = 12;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          // signUpAPI 실패\n          console.error(_context4.t0);\n          _context4.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/user.js"],"names":["watchLogin","login","watchSignUp","signUp","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","loginAPI","loginData","post","withCredentials","action","data","result","type","console","error","signUpAPI","signUpData","watchLogOut","watchLoadUser"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n// all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\r\n// call -> 함수 동기적 호출\r\n// ex) 서버에 요청을하면 응답이 될때까지 기다렸다가 다음으로 넘어감, 서버요청할때 많이 사용?\r\n// fork -> 함수 비동기적 호출\r\n// ex) 서버에 요청하면 응답이오던 말든 다음으로 넘어감.\r\n// put ->  Action dispatch 동일\r\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n// takeLatest -> 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소 액션을 여러번 요청하는 경우 마지막 액션을 실행\r\n//  ex) 로그인 버튼 여러번 했을 경우 로그인 요청이 여러개 나타나는 것을 막을 수 있다.\r\n// takeEvery -> while(true)\r\n//  ex) 여러번 클릭이 유효한 거면 사용, 숫자 카운트 등등\r\n// delay -> delay(1000)\r\n\r\n// function* watchHello() {\r\n//     yield takeEvery(HELLO_SAGA, function*(){\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     })\r\n// }\r\n\r\n// function* watchHello() {\r\n//     while(true){\r\n//     yield take(HELLO_SAGA);\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n\r\n//     // while(true)  제너레이터에서만 사용가능한 문법\r\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\r\n//     while(true){\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//     }\r\n//     // 비동기 요청, 타이머 넣어도 되고\r\n// }\r\n\r\n\r\n\r\n// while문이 없으면 함수가 끝나버린다.\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST,login);\r\n}\r\n\r\nfunction loginAPI(loginData) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials: true, // 쿠키를 주고 받을 수 있다.\r\n    });\r\n}\r\n   \r\n   \r\nfunction* login(action) {\r\n    try{\r\n        const result = yield call(loginAPI, action.data);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp);\r\n}\r\n\r\nfunction signUpAPI(signUpData) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/', signUpData);\r\n}\r\n   \r\n   \r\nfunction* signUp(action) {\r\n    try{\r\n        yield call(signUpAPI, action.data);\r\n        yield put ({ \r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch (e) { // signUpAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: SIGN_UP_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}