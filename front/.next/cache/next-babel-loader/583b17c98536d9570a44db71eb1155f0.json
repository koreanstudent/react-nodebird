{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport PostCard from '../components/PostCard';\n\nvar User = function User(_ref) {\n  var id = _ref.id;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo; // userInfo 남의 정보\n  // 남의 정보와 남의 게시물 가져온다.\n\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_USER_REQUEST,\n      data: id\n    });\n    dispatch({\n      type: LOAD_USER_POSTS_REQUEST,\n      data: id\n    });\n  }, []);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: +c.createdAt,\n      post: c\n    });\n  }));\n}; //  getInitialProps 거쳐서 propTypes\n\n\nUser.propTypes = {\n  id: PropTypes.number.isRequired\n}; // next에서 제공, 서버로 부터 동적인 데이터를 가져올 수 있다. 가장 최초의 작업\n\nUser.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('User getInitialProps', context.query.id);\n          return _context.abrupt(\"return\", {\n            id: _parseInt(context.query.id, 10)\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default User;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/pages/user.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","Avatar","Card","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","PostCard","User","id","dispatch","state","post","mainPosts","user","userInfo","type","data","Posts","Followings","Followers","nickname","map","c","createdAt","propTypes","number","isRequired","getInitialProps","context","console","log","query"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;AACrB,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AADqB,qBAECC,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFZ;AAAA,MAEbC,SAFa,gBAEbA,SAFa;;AAAA,sBAGAX,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHX;AAAA,MAGbC,QAHa,iBAGbA,QAHa,EAGkC;AAEvD;;;AACAhB,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEV,iBADC;AAEPW,MAAAA,IAAI,EAAER;AAFC,KAAD,CAAR;AAIAC,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEX,uBADC;AAEPY,MAAAA,IAAI,EAAER;AAFC,KAAD,CAAR;AAID,GATQ,EASN,EATM,CAAT;AAUA,SACE,mBACGM,QAAQ,GAEL,MAAC,IAAD;AACE,IAAA,OAAO,EAAE,CACP;AAAK,MAAA,GAAG,EAAC;AAAT,uBAEE,iBAFF,EAGGA,QAAQ,CAACG,KAHZ,CADO,EAMP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGH,QAAQ,CAACI,UAHZ,CANO,EAWP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGJ,QAAQ,CAACK,SAHZ,CAXO;AADX,KAmBE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EAAE,MAAC,MAAD,QAASL,QAAQ,CAACM,QAAT,CAAkB,CAAlB,CAAT,CADV;AAEE,IAAA,KAAK,EAAEN,QAAQ,CAACM;AAFlB,IAnBF,CAFK,GA2BL,IA5BN,EA6BGR,SAAS,CAACS,GAAV,CAAc,UAAAC,CAAC;AAAA,WACd,MAAC,QAAD;AAAU,MAAA,GAAG,EAAE,CAACA,CAAC,CAACC,SAAlB;AAA6B,MAAA,IAAI,EAAED;AAAnC,MADc;AAAA,GAAf,CA7BH,CADF;AAmCD,CAnDH,C,CAoDA;;;AACAf,IAAI,CAACiB,SAAL,GAAiB;AACbhB,EAAAA,EAAE,EAAGT,SAAS,CAAC0B,MAAV,CAAiBC;AADT,CAAjB,C,CAIA;;AACAnB,IAAI,CAACoB,eAAL,GAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,OAAO,CAACG,KAAR,CAAcvB,EAAlD;AADmB,2CAEZ;AAAEA,YAAAA,EAAE,EAAE,UAASoB,OAAO,CAACG,KAAR,CAAcvB,EAAvB,EAA2B,EAA3B;AAAN,WAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAKA,eAAeD,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport PostCard from '../components/PostCard';\r\n\r\nconst User = ({ id }) => {\r\n    const dispatch = useDispatch();\r\n    const { mainPosts } = useSelector(state => state.post);\r\n    const { userInfo } = useSelector(state => state.user); // userInfo 남의 정보\r\n  \r\n    // 남의 정보와 남의 게시물 가져온다.\r\n    useEffect(() => {\r\n      dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n        data: id,\r\n      });\r\n      dispatch({\r\n        type: LOAD_USER_POSTS_REQUEST,\r\n        data: id,\r\n      });\r\n    }, []);\r\n    return (\r\n      <div>\r\n        {userInfo\r\n          ? (\r\n            <Card\r\n              actions={[\r\n                <div key=\"twit\">\r\n                  짹짹\r\n                  <br />\r\n                  {userInfo.Posts}\r\n                </div>,\r\n                <div key=\"following\">\r\n                  팔로잉\r\n                  <br />\r\n                  {userInfo.Followings}\r\n                </div>,\r\n                <div key=\"follower\">\r\n                  팔로워\r\n                  <br />\r\n                  {userInfo.Followers}\r\n                </div>,\r\n              ]}\r\n            >\r\n              <Card.Meta\r\n                avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n                title={userInfo.nickname}\r\n              />\r\n            </Card>\r\n          )\r\n          : null}\r\n        {mainPosts.map(c => (\r\n          <PostCard key={+c.createdAt} post={c} />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n//  getInitialProps 거쳐서 propTypes\r\nUser.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n}\r\n\r\n// next에서 제공, 서버로 부터 동적인 데이터를 가져올 수 있다. 가장 최초의 작업\r\nUser.getInitialProps = async (context) => {\r\n    console.log('User getInitialProps', context.query.id);\r\n    return { id: parseInt(context.query.id, 10) };\r\n  };\r\n\r\nexport default User;\r\n"]},"metadata":{},"sourceType":"module"}