{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(wathchLogin),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; // call -> 함수 동기적 호출\n// fork -> 함수 비동기적 호출\n// put ->  Action dispatch 동일\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('hello saga');\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\n\n\nfunction wathchLogin() {\n  return _regeneratorRuntime.wrap(function wathchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(wathchLogin), helloSaga()]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/user.js"],"names":["login","helloSaga","wathchLogin","userSaga","all","fork","takeLatest","call","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","type","console","error","log"],"mappings":";;;;yBAYUA,K;;;yBAcAC,S;;;yBAKAC,W;;;yBAIeC,Q;;AAnCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;;AAEA,SAASC,QAAT,GAAoB,CACnB;AACA;;AAGD,SAAUZ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,IAAI,CAACK,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMJ,GAAG,CAAE;AACPK,YAAAA,IAAI,EAAEH;AADC,WAAF,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMkB;AACVI,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMP,GAAG,CAAE;AACPK,YAAAA,IAAI,EAAEF;AADC,WAAF,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUV,SAAV;AAAA;AAAA;AAAA;AAAA;AACIa,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAZ;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAAUd,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACG,MAAD,EAAQT,KAAR,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAE,CACPC,IAAI,CAACH,WAAD,CADG,EAEPD,SAAS,EAFF,CAAF,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, call, put } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n// call -> 함수 동기적 호출\r\n// fork -> 함수 비동기적 호출\r\n// put ->  Action dispatch 동일\r\n\r\nfunction loginAPI() {\r\n // 서버에 요청을 보내는 부분\r\n}\r\n\r\n\r\nfunction* login() {\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* helloSaga() {\r\n    console.log('hello saga');\r\n}\r\n\r\n// takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\r\nfunction* wathchLogin() {\r\n    yield takeLatest(LOG_IN,login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all ([\r\n        fork(wathchLogin),\r\n        helloSaga(),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}