{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {}\n\nfunction* loadMainPosts(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield takeLatest(ADD_COMMENT_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchloadMainPosts), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","call","data","type","e","error","watchAddPost","loadMainPostsAPI","loadMainPosts","postId","watchloadMainPosts","addCommentAPI","addComment","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,mBAA/D,EAAoFC,mBAApF,EAAyGC,mBAAzG,EAA8HC,uBAA9H,EAAuJC,uBAAvJ,QAAsL,kBAAtL;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA6B;AACzB,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACjCE,IAAAA,eAAe,EAAE;AADgB,GAA9B,CAAP;AAGH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACP,UAAD,EAAaK,MAAM,CAACG,IAApB,CAAzB;AACA,UAAMnB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEjB,gBADA;AAENgB,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOE,CAAP,EAAS;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEhB,gBADA;AAENkB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUE,YAAV,GAAyB;AACrB,QAAMxB,UAAU,CAACG,gBAAD,EAAkBa,OAAlB,CAAhB;AACH;;AAED,SAASS,gBAAT,GAA2B,CAE1B;;AAED,UAAUC,aAAV,CAAwBT,MAAxB,EAAgC;AAC5B,MAAI;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEZ,uBADA;AAENW,MAAAA,IAAI,EAAE;AACFO,QAAAA,MAAM,EAAEV,MAAM,CAACG,IAAP,CAAYO;AADlB;AAFA,KAAD,CAAT;AAMH,GARD,CAQE,OAAOL,CAAP,EAAS;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEX,uBADA;AAENa,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUM,kBAAV,GAA+B;AAC3B,QAAM5B,UAAU,CAACM,mBAAD,EAAqBoB,aAArB,CAAhB;AACH;;AAED,SAASG,aAAT,GAAwB,CAEvB;;AAED,UAAUC,UAAV,CAAqBb,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEd,mBADA;AAENa,MAAAA,IAAI,EAAE;AACFO,QAAAA,MAAM,EAAEV,MAAM,CAACG,IAAP,CAAYO;AADlB;AAFA,KAAD,CAAT;AAMH,GARD,CAQE,OAAOL,CAAP,EAAS;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEb,mBADA;AAENe,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUS,eAAV,GAA4B;AACxB,QAAM/B,UAAU,CAACM,mBAAD,EAAqBwB,UAArB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMlC,GAAG,CAAE,CACPC,IAAI,CAACyB,YAAD,CADG,EAEPzB,IAAI,CAAC6B,kBAAD,CAFG,EAGP7B,IAAI,CAACgC,eAAD,CAHG,CAAF,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n}\r\n\r\nfunction* loadMainPosts(action) {\r\n    try {\r\n        yield delay(2000);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            }\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchloadMainPosts() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,loadMainPosts);\r\n}\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            }\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all ([\r\n        fork(watchAddPost),\r\n        fork(watchloadMainPosts),\r\n        fork(watchAddComment)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}