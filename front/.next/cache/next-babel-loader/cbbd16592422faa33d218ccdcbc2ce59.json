{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST } from '../reducers/user'; // all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\n// call -> 함수 동기적 호출\n// ex) 서버에 요청을하면 응답이 될때까지 기다렸다가 다음으로 넘어감, 서버요청할때 많이 사용?\n// fork -> 함수 비동기적 호출\n// ex) 서버에 요청하면 응답이오던 말든 다음으로 넘어감.\n// put ->  Action dispatch 동일\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\n// takeLatest -> 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소 액션을 여러번 요청하는 경우 마지막 액션을 실행\n//  ex) 로그인 버튼 여러번 했을 경우 로그인 요청이 여러개 나타나는 것을 막을 수 있다.\n// takeEvery -> while(true)\n//  ex) 여러번 클릭이 유효한 거면 사용, 숫자 카운트 등등\n// delay -> delay(1000)\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*(){\n//         console.log(1);\n//         console.log(2);\n//     })\n// }\n// function* watchHello() {\n//     while(true){\n//     yield take(HELLO_SAGA);\n//         console.log(1);\n//         console.log(2);\n//     }\n// }\n// function* watchHello() {\n//     console.log('before saga');\n//     // while(true)  제너레이터에서만 사용가능한 문법\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\n//     while(true){\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//     }\n//     // 비동기 요청, 타이머 넣어도 되고\n// }\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n} // while문이 없으면 함수가 끝나버린다.\n\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","loginAPI","login","type","e","console","error","watchLogin","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,EAAiDC,cAAjD,QAAuE,kBAAvE,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACA;;AAGD,UAAUC,KAAV,GAAkB;AACd,MAAG;AACC,UAAMT,IAAI,CAACQ,QAAD,CAAV;AACA,UAAMP,GAAG,CAAE;AACPS,MAAAA,IAAI,EAAEL;AADC,KAAF,CAAT;AAGH,GALD,CAKE,OAAOM,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAE;AACPS,MAAAA,IAAI,EAAEJ;AADC,KAAF,CAAT;AAGH;AACJ,C,CAEJ;;;AACA,UAAUQ,UAAV,GAAuB;AACnB,QAAMf,SAAS,CAACQ,cAAD,EAAgBE,KAAhB,CAAf;AACH;;AAED,UAAUM,WAAV,GAAuB,CAEtB;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CACNC,IAAI,CAACiB,UAAD,CADE,EAENjB,IAAI,CAACkB,WAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST } from '../reducers/user';\r\n\r\n// all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\r\n// call -> 함수 동기적 호출\r\n// ex) 서버에 요청을하면 응답이 될때까지 기다렸다가 다음으로 넘어감, 서버요청할때 많이 사용?\r\n// fork -> 함수 비동기적 호출\r\n// ex) 서버에 요청하면 응답이오던 말든 다음으로 넘어감.\r\n// put ->  Action dispatch 동일\r\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n// takeLatest -> 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소 액션을 여러번 요청하는 경우 마지막 액션을 실행\r\n//  ex) 로그인 버튼 여러번 했을 경우 로그인 요청이 여러개 나타나는 것을 막을 수 있다.\r\n// takeEvery -> while(true)\r\n//  ex) 여러번 클릭이 유효한 거면 사용, 숫자 카운트 등등\r\n// delay -> delay(1000)\r\n\r\n// function* watchHello() {\r\n//     yield takeEvery(HELLO_SAGA, function*(){\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     })\r\n// }\r\n\r\n// function* watchHello() {\r\n//     while(true){\r\n//     yield take(HELLO_SAGA);\r\n//         console.log(1);\r\n//         console.log(2);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n\r\n//     // while(true)  제너레이터에서만 사용가능한 문법\r\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\r\n//     while(true){\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//     }\r\n//     // 비동기 요청, 타이머 넣어도 되고\r\n// }\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n   }\r\n   \r\n   \r\n   function* login() {\r\n       try{\r\n           yield call(loginAPI);\r\n           yield put ({ \r\n               type: LOG_IN_SUCCESS,\r\n           })\r\n       } catch (e) { // loginAPI 실패\r\n           console.error(e);\r\n           yield put ({\r\n               type: LOG_IN_FAILURE,\r\n           })\r\n       }\r\n   }\r\n\r\n// while문이 없으면 함수가 끝나버린다.\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST,login);\r\n}\r\n\r\nfunction* watchSignUp(){\r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp),\r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}