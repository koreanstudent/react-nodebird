{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Input, Form, List, Comment } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) // a tag x -> Link\n\n  }), \")}\"), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uB313\\uAE00\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, null, item.User.nickname[0]),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Input","Form","List","Comment","Link","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","pathname","query","User","nickname","content","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect  } from 'react';\r\nimport { Card, Icon, Button, Avatar, Input, Form,List,Comment} from 'antd';\r\nimport Link  from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText,setCommentText] = useState('');\r\n    const { me } = useSelector( state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n          return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n          type: ADD_COMMENT_REQUEST,\r\n          data: {\r\n            postId: post.id,\r\n          },\r\n        });\r\n      }, [me && me.id]);\r\n    \r\n      useEffect(() => {\r\n        setCommentText('');\r\n      }, [commentAdded === true]);\r\n    \r\n      const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n      }, []);\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img}/>}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                <Icon type=\"heart\" key=\"heart\"/>,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\"/>,\r\n            ]}\r\n            extra ={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta\r\n              avatar={(\r\n                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                </Link>\r\n              )}\r\n              title={post.User.nickname}\r\n              description={<PostCardContent postData={post.content} />} // a tag x -> Link\r\n            />\r\n          )}\r\n        </Card>\r\n        {commentFormOpened && (\r\n            <>\r\n            <Form onSubmit={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows={4} value={commentText} onChange={ onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>댓글</Button>\r\n            </Form>\r\n            <List header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                  itemLayout=\"horizontal\"\r\n                  dataSource={post.Comments || []}\r\n                  renderItem = {item => (\r\n                      <li>\r\n                          <Comment\r\n                                author={item.User.nickname}\r\n                                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                content = {item.content}\r\n                                \r\n                          />\r\n                      </li>\r\n                  )}\r\n            />\r\n            </>\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    })\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}