{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true // 로그인 한사람만 글쓰게할수잇게 쿠키를 보낸다\n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts', {});\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.comment\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComment() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchloadMainPosts), fork(watchAddComment), fork(watchLoadComment), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchloadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","comment","addComment","watchAddComment","loadCommentAPI","loadComments","watchLoadComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post', postData, {\r\n      withCredentials: true, // 로그인 한사람만 글쓰게할수잇게 쿠키를 보낸다\r\n    });\r\n  }\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts', {});\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data\r\n            \r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchloadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n\r\n    return axios.get(`/hashtag/${tag}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data\r\n            \r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`);\r\n  }\r\n  \r\n  function* loadUserPosts(action) {\r\n    try {\r\n      const result = yield call(loadUserPostsAPI, action.data);\r\n      yield put({\r\n        type: LOAD_USER_POSTS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: LOAD_USER_POSTS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n  }\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, {content: data.comment }, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI,action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n                comment : result.data\r\n            }\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nfunction loadCommentAPI(postId){\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield call(loadCommentAPI,action.data);\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                comment : result.data\r\n            }\r\n        });\r\n    } catch (e){\r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadComment() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST,loadComments);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all ([\r\n        fork(watchAddPost),\r\n        fork(watchloadMainPosts),\r\n        fork(watchAddComment),\r\n        fork(watchLoadComment),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}