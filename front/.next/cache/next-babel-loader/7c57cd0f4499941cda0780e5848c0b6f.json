{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; // all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\n// call -> 함수 동기적 호출\n// fork -> 함수 비동기적 호출\n// put ->  Action dispatch 동일\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\n// takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\n// takeEvery -> \n\nfunction* watchHello() {\n  yield takeEvery(HELLO_SAGA, function* () {\n    console.log(1);\n    console.log(2);\n  });\n}\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n} // function* watchHello() {\n//     console.log('before saga');\n//     // while(true)  제너레이터에서만 사용가능한 문법\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\n//     while(true){\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//     }\n//     // 비동기 요청, 타이머 넣어도 되고\n// }\n// while문이 없으면 함수가 끝나버린다.\n\n\nfunction* watchLogin() {\n  console.log(\"saga\");\n\n  while (true) {\n    console.log(\"saga2\");\n    yield take(LOG_IN);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  }\n}\n\nfunction* watchSignUp() {}\n\nexport default function* userSaga() {\n  yield all([watchLogin(), watchSignUp()]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","watchHello","HELLO_SAGA","console","log","loginAPI","login","type","e","error","watchLogin","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,QAAkE,oBAAlE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAUC,UAAV,GAAuB;AACnB,QAAMP,SAAS,CAACQ,UAAD,EAAa,aAAW;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACH,GAHc,CAAf;AAIH;;AAED,SAASC,QAAT,GAAoB,CACnB;AACA;;AAGD,UAAUC,KAAV,GAAkB;AACd,MAAG;AACC,UAAMX,IAAI,CAACU,QAAD,CAAV;AACA,UAAMT,GAAG,CAAE;AACPW,MAAAA,IAAI,EAAER;AADC,KAAF,CAAT;AAGH,GALD,CAKE,OAAOS,CAAP,EAAU;AAAE;AACVL,IAAAA,OAAO,CAACM,KAAR,CAAcD,CAAd;AACA,UAAMZ,GAAG,CAAE;AACPW,MAAAA,IAAI,EAAEP;AADC,KAAF,CAAT;AAGH;AACJ,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,UAAUU,UAAV,GAAuB;AACnBP,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,SAAM,IAAN,EAAW;AACPD,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,UAAMP,IAAI,CAACC,MAAD,CAAV;AACA,UAAMF,GAAG,CAAE;AACPW,MAAAA,IAAI,EAAER;AADC,KAAF,CAAT;AAGH;AACJ;;AAED,UAAUY,WAAV,GAAuB,CAEtB;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMrB,GAAG,CAAC,CACNmB,UAAU,EADJ,EAENC,WAAW,EAFL,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n// all -> 여러 이펙트를 동시에 실행할 수 있게 합니다.\r\n// call -> 함수 동기적 호출\r\n// fork -> 함수 비동기적 호출\r\n// put ->  Action dispatch 동일\r\n// take => 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n// takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\r\n// takeEvery -> \r\n\r\nfunction* watchHello() {\r\n    yield takeEvery(HELLO_SAGA, function*(){\r\n        console.log(1);\r\n        console.log(2);\r\n    })\r\n}\r\n\r\nfunction loginAPI() {\r\n // 서버에 요청을 보내는 부분\r\n}\r\n\r\n\r\nfunction* login() {\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n\r\n//     // while(true)  제너레이터에서만 사용가능한 문법\r\n//     // 클릭이벤트를 횟수 제한도 가능, 반복 (for문) 사가에서 동작하지 않아도 리듀서는 동작 -> 별개\r\n//     while(true){\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//     }\r\n//     // 비동기 요청, 타이머 넣어도 되고\r\n// }\r\n\r\n// while문이 없으면 함수가 끝나버린다.\r\nfunction* watchLogin() {\r\n    console.log(\"saga\");\r\n    while(true){\r\n        console.log(\"saga2\");\r\n        yield take(LOG_IN);\r\n        yield put ({\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchLogin(),\r\n        watchSignUp(),\r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}