{"ast":null,"code":"import { all, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; // call -> 함수 동기적 호출\n// fork -> 함수 비동기적 호출\n// put ->  Action dispatch 동일\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n} // takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\n\n\nfunction* wathchLogin() {\n  yield takeLatest(LOG_IN, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(wathchLogin)]);\n}","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","e","console","error","wathchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;;AAEA,SAASC,QAAT,GAAoB,CACnB;AACA;;AAGD,UAAUC,KAAV,GAAkB;AACd,MAAG;AACC,UAAMN,IAAI,CAACK,QAAD,CAAV;AACA,UAAMJ,GAAG,CAAE;AACPM,MAAAA,IAAI,EAAEJ;AADC,KAAF,CAAT;AAGH,GALD,CAKE,OAAOK,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMP,GAAG,CAAE;AACPM,MAAAA,IAAI,EAAEH;AADC,KAAF,CAAT;AAGH;AACJ,C,CAED;;;AACA,UAAUO,WAAV,GAAwB;AACpB,QAAMZ,UAAU,CAACG,MAAD,EAAQI,KAAR,CAAhB;AACH;;AAED,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMf,GAAG,CAAE,CACPC,IAAI,CAACa,WAAD,CADG,CAAF,CAAT;AAGH","sourcesContent":["import { all, fork, takeLatest, call, put } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n// call -> 함수 동기적 호출\r\n// fork -> 함수 비동기적 호출\r\n// put ->  Action dispatch 동일\r\n\r\nfunction loginAPI() {\r\n // 서버에 요청을 보내는 부분\r\n}\r\n\r\n\r\nfunction* login() {\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put ({ \r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\n// takeLatest -> LOG_IN 액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출\r\nfunction* wathchLogin() {\r\n    yield takeLatest(LOG_IN,login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all ([\r\n        fork(wathchLogin),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}