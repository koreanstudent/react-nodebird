{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar dummyUser = {\n  nickname: '이창현',\n  Post: [],\n  Followers: [],\n  Followings: [],\n  signData: []\n}; // store\n\nexport var intialState = {\n  isLoggedIn: false,\n  user: null\n};\nexport var LOG_IN = 'LOG_IN'; // 액션의 이름\n\nexport var LOG_OUT = 'LOG_OUT';\nexport var SIGN_UP = 'SIGN_UP';\nexport var loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: '이창현'\n  }\n};\nexport var logoutAction = {\n  type: LOG_OUT\n}; // Action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다.\n\nexport var signUpAction = function signUpAction(data) {\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : intialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        //로그인 성공시\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/chang/Desktop/web/react-nodebird/react-nodebird/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followers","Followings","signData","intialState","isLoggedIn","user","LOG_IN","LOG_OUT","SIGN_UP","loginAction","type","data","logoutAction","signUpAction","reducer","state","action"],"mappings":";;;;;;;;;;;;AACA,IAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,KADI;AAEdC,EAAAA,IAAI,EAAE,EAFQ;AAGdC,EAAAA,SAAS,EAAE,EAHG;AAIdC,EAAAA,UAAU,EAAE,EAJE;AAKdC,EAAAA,QAAQ,EAAE;AALI,CAAlB,C,CAQA;;AACA,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,UAAU,EAAE,KADW;AAEvBC,EAAAA,IAAI,EAAE;AAFiB,CAApB;AAKP,OAAO,IAAMC,MAAM,GAAE,QAAd,C,CAAwB;;AAC/B,OAAO,IAAMC,OAAO,GAAC,SAAd;AACP,OAAO,IAAMC,OAAO,GAAC,SAAd;AAEP,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAEJ,MADiB;AAEvBK,EAAAA,IAAI,EAAE;AACFb,IAAAA,QAAQ,EAAE;AADR;AAFiB,CAApB;AAOP,OAAO,IAAMc,YAAY,GAAG;AACxBF,EAAAA,IAAI,EAAEH;AADkB,CAArB,C,CAGP;;AACA,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACF,IAAD,EAAU;AAClC,SAAO;AACPD,IAAAA,IAAI,EAAEF,OADC;AAEPG,IAAAA,IAAI,EAAEA;AAFC,GAAP;AAIH,CALM;;AAOP,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAgC;AAAA,MAA/BC,KAA+B,uEAAxBZ,WAAwB;AAAA,MAAXa,MAAW;;AAC5C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKJ,MAAL;AAAa;AAAG;AACZ,iCACOS,KADP;AAEIX,UAAAA,UAAU,EAAC,IAFf;AAGIC,UAAAA,IAAI,EAACR;AAHT;AAKH;;AACD,SAAKU,OAAL;AAAc;AACV,iCACOQ,KADP;AAEIX,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,IAAI,EAAE;AAHV;AAKH;;AACD,SAAKG,OAAL;AAAe;AACX,iCACOO,KADP;AAEIb,UAAAA,QAAQ,EAAEc,MAAM,CAACL;AAFrB;AAIH;;AACD;AAAS;AACL,iCACOI,KADP;AAGH;AAzBL;AA4BH,CA7BD;;AA+BA,eAAeD,OAAf","sourcesContent":["\r\nconst dummyUser = {\r\n    nickname: '이창현',\r\n    Post: [],\r\n    Followers: [],\r\n    Followings: [],\r\n    signData: [],\r\n};\r\n\r\n// store\r\nexport const intialState = {\r\n    isLoggedIn: false,\r\n    user: null,\r\n};\r\n\r\nexport const LOG_IN ='LOG_IN'; // 액션의 이름\r\nexport const LOG_OUT='LOG_OUT';\r\nexport const SIGN_UP='SIGN_UP';\r\n\r\nexport const loginAction = {\r\n    type: LOG_IN,\r\n    data: {\r\n        nickname: '이창현'\r\n    },\r\n};\r\n\r\nexport const logoutAction = {\r\n    type: LOG_OUT,\r\n}\r\n// Action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다.\r\nexport const signUpAction = (data) => {\r\n    return {\r\n    type: SIGN_UP,\r\n    data: data, \r\n    }\r\n}\r\n\r\nconst reducer = (state= intialState, action) => {\r\n    switch (action.type){\r\n        case LOG_IN: {  //로그인 성공시\r\n            return {\r\n                ...state,\r\n                isLoggedIn:true,\r\n                user:dummyUser,\r\n            }\r\n        }\r\n        case LOG_OUT: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                user: null,\r\n            }\r\n        }\r\n        case SIGN_UP : {\r\n            return {\r\n                ...state,\r\n                signData: action.data\r\n            }\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}